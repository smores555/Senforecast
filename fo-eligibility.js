// fo-eligibility.js — FO Hire → Upgrade (most-junior CA + 18 months)
async function loadJson(path){ const r = await fetch(path,{cache:'no-store'}); if(!r.ok) throw new Error('Missing '+path); return r.json(); }
function addMonthsISO(ymd,n){ const [y,m,d]=ymd.split(/[-\/]/).map(s=>parseInt(s,10)); const dt=new Date(y,(m||1)-1,d||1); dt.setMonth(dt.getMonth()+n); const y2=dt.getFullYear(); const m2=String(dt.getMonth()+1).padStart(2,'0'); const d2=String(dt.getDate()).padStart(2,'0'); return `${y2}-${m2}-${d2}`; }
function normalizeDateString(v){ if(!v) return null; if(/\d{4}-\d{2}-\d{2}/.test(v)) return v; const m=v.match(/^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/); if(m){ let [_,mm,dd,yy]=m; mm=mm.padStart(2,'0'); dd=dd.padStart(2,'0'); if(yy.length===2){ yy=(parseInt(yy,10)>=70?'19'+yy:'20'+yy);} return `${yy}-${mm}-${dd}`;} return null; }
function getCaptainDate(c){ const keys=['seatDate','awardDate','effectiveDate','hireDate','hire_date','seniorityDate','doj','date']; for(const k of keys){ if(c&&c[k]) return normalizeDateString(c[k])||c[k]; } return null; }
function mostJuniorCaptainDate(roster){ let latest=null; for(const c of (roster||[])){ const dt=getCaptainDate(c); if(!dt) continue; if(!latest || dt>latest) latest=dt; } return latest; }
function diffYearsMonths(from,to){ let y=to.getFullYear()-from.getFullYear(); let m=to.getMonth()-from.getMonth(); if(m<0){y-=1;m+=12;} if(y<0){y=0;m=0;} return {y,m}; }
async function baseFOEligibilityDateFromFile(path){ const data=await loadJson('data/'+path); const roster=Array.isArray(data)?data:(data.pilots||data.captains||data.rows||data.list||[]); const mj=mostJuniorCaptainDate(roster); return mj?addMonthsISO(mj,18):null; }
async function computeAll(index){ const out={}; const caCombos=(index.combos||[]).filter(c=>c.seat==='CA'&&c.file); for(const c of caCombos){ try{ const date=await baseFOEligibilityDateFromFile(c.file); out[c.base]=date||'—'; }catch(e){ out[c.base||'UNKNOWN']='—'; } } return out; }
async function renderFOEligibilityBlock(containerId='fo-eligibility'){ const el=document.getElementById(containerId); if(!el) return; let index; try{ index=await loadJson('data/index.json'); }catch(e){ index=await loadJson('data/index.json.txt'); } const map=await computeAll(index); const now=new Date(); const rows=Object.keys(map).sort().map(base=>{ const iso=map[base]; if(!iso||iso==='—') return `<tr><td>${base}</td><td>—</td><td>—</td></tr>`; const [y,m,d]=iso.split('-').map(Number); const dt=new Date(y,m-1,d||1); const future=dt>now; const diff=future?diffYearsMonths(now,dt):{y:0,m:0}; const span=future?`${diff.y}y ${diff.m}m`:'eligible'; return `<tr><td>${base}</td><td>${iso}</td><td>${span}</td></tr>`; }).join(''); el.innerHTML=`<div class="table-wrap"><table><thead><tr><th>Base</th><th>Projected Date</th><th>FO hire → upgrade</th></tr></thead><tbody>${rows}</tbody></table></div>`; }
